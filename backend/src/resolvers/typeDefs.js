"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
exports.typeDefs = void 0;
var apollo_server_1 = require("apollo-server");
exports.typeDefs = (0, apollo_server_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Query {\n    hello: String!\n    getMoviesBySearchstring(searchstring: String!, limit: Int!, offset:Int!): MovieResponse!\n    getReviewsByMovie(movieID:String!): [Review]!\n    getMovies(title: String, genre: String, fromYear: Int, toYear: Int, limit: Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByYearAndGenre(fromYear:Int!, toYear:Int!, genre:String!, limit:Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByYear(fromYear:Int!, toYear:Int!,limit:Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByGenre(genre:String!, limit:Int!, offset: Int!): MovieResponse!\n    login(username:String!, password: String!): User!\n\n    getMovieByID(movieID: String!): Movie\n  }\n\n  type User{\n    id: ID!\n    email: String!\n    token: String!\n    username: String!\n    createdAt: String!\n  }\n  type Review {\n    id: ID!\n    rating: Int!\n    review: String\n    movieID: String!\n    username: String\n    userID: String\n    createdAt: String\n  }\n  type MovieResponse {\n    movies: [Movie]\n    pages: Int!\n  }\n  type Movie {\n    id: ID!\n    title: String!\n    year: String!\n    genres: [String]!\n    actors: [String]!\n    posterurl: String\n    storyline: String!\n    reviews: [Review]\n  }\n  type Mutation {\n    createReview(rating: Int!, review: String, movieID: String!): Review!\n    register(\n      username: String!\n      password: String!\n      confirmPassword: String!\n      email: String!\n    ): User!\n  }\n\n  input RegisterInput {\n    username: String!\n    password: String!\n    confirmPassword: String!\n    email: String!\n  }\n"], ["\n  type Query {\n    hello: String!\n    getMoviesBySearchstring(searchstring: String!, limit: Int!, offset:Int!): MovieResponse!\n    getReviewsByMovie(movieID:String!): [Review]!\n    getMovies(title: String, genre: String, fromYear: Int, toYear: Int, limit: Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByYearAndGenre(fromYear:Int!, toYear:Int!, genre:String!, limit:Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByYear(fromYear:Int!, toYear:Int!,limit:Int!, offset: Int!): MovieResponse!\n    getFilteredMoviesByGenre(genre:String!, limit:Int!, offset: Int!): MovieResponse!\n    login(username:String!, password: String!): User!\n\n    getMovieByID(movieID: String!): Movie\n  }\n\n  type User{\n    id: ID!\n    email: String!\n    token: String!\n    username: String!\n    createdAt: String!\n  }\n  type Review {\n    id: ID!\n    rating: Int!\n    review: String\n    movieID: String!\n    username: String\n    userID: String\n    createdAt: String\n  }\n  type MovieResponse {\n    movies: [Movie]\n    pages: Int!\n  }\n  type Movie {\n    id: ID!\n    title: String!\n    year: String!\n    genres: [String]!\n    actors: [String]!\n    posterurl: String\n    storyline: String!\n    reviews: [Review]\n  }\n  type Mutation {\n    createReview(rating: Int!, review: String, movieID: String!): Review!\n    register(\n      username: String!\n      password: String!\n      confirmPassword: String!\n      email: String!\n    ): User!\n  }\n\n  input RegisterInput {\n    username: String!\n    password: String!\n    confirmPassword: String!\n    email: String!\n  }\n"])));
var templateObject_1;
